{"version":3,"sources":["libs/usng.js/dist/usng.js","app.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","factory","module","exports","v","require","undefined","define","amd","defineProperty","value","atanh","Math","x","log","epsilon","Number","pow","hypot","y","max","sumsq","arg","abs","mar","mar2","sqrt","includes","list","item","indexOf","sinh","exp","es","eatanhe","taupf","tauValue","tau1","sig","tauf","taupValue","e2m","tau","stol","taupa","dtau","extend","objToExtend","obj","keys","key","push","Converter","options","initialize","ngFunctionsPresent","UNDEFINED_STR","UPS_REGEX","UTM_REGEX","FOURTHPI","PI","DEG_2_RAD","RAD_2_DEG","BLOCK_SIZE","IS_NAD83_DATUM","GRIDSQUARE_SET_COL_SIZE","GRIDSQUARE_SET_ROW_SIZE","EASTING_OFFSET","NORTHING_OFFSET","k0","a","c","rhoAdjusterValue","falseUPSNorthing","falseUPSEasting","EQUATORIAL_RADIUS","ECC_PRIME_SQUARED","ECC_SQUARED","num100kSets","originRowLetters","UTMGzdLetters","USNGSqEast","USNGSqLetOdd","USNGSqLetEven","datum","toUpperCase","E1","getZoneNumber","lat","lon","parseFloat","Error","toFixed","lonTemp","floor","zoneNumber","LLtoKM","lat1","lon1","lat2","lon2","R","phi1","phi2","deltaPhi","deltaLlamda","sin","cos","atan2","LLBboxtoUSNG","north","south","east","west","northNum","southNum","eastNum","westNum","height","dist","result","LLtoUSNG","serializeUTMUPS","utmups","isUTM","upsZoneLetter","northPole","easting","northing","calculatedZone","round","serializeUTM","utm","deserializeUTM","utmString","_a","processInvalidUTM","exec","err","LLtoUTM","utmcoords","zone","latRad","lonRad","lonOrigin","lonOriginRad","UTMZone","UTMLetterDesignator","N","T","tan","C","A","M","UTMEasting","UTMNorthing","LLtoUTMwithNS","UTMtoLLwithNS","UTMZoneNumber","accuracy","NorSIndicator","UTMtoLL","deserializeUPS","upsString","zoneLetter","UPStoLL","LLtoUPS","isLatLonCoordinatesPairInvalid","taup","rhoStep1","rhoStep2","rhoStep3","rho","upsCoordinates","_this","validateUPSCoordinates","processInvalidUPS","JSON","stringify","processValidUPS","adjustedUPS","atan","isUPSObjectDefined","isUPSMetricComponentValid","metricValue","isUPSEastingValid","isUPSNorthingValid","isUPSValid","processConversion","UTMUPStoLL","utmupsInput","isInputString","isInputUPSString","charAt","isInputUPSObject","LLtoUTMUPSObject","LLtoUTMUPS","precision","coords","USNGLetters","findGridLetters","USNGNorthing","USNGEasting","digitPrecision","USNG","String","index","fromCharCode","findSet","zoneNum","parseInt","row","north_1m","col","east_1m","lettersHelper","setter","l1","l2","xUTM","yUTM","mu","phi1Rad","N1","T1","C1","R1","D","northEast","lats","zoneLetterLats","lons","zoneNumberLons","letter","USNGtoUTM","sq1","sq2","ret","eastingArray","zoneBase","northingArrayOdd","northingArrayEven","E","get100kSetForZone","setParm","getNorthingFromChar","setVal","curRow","charCodeAt","northingValue","rewindMarker","USNGtoLL","usngStr_input","getCenter","usngp","parseUSNG_str","let","parts","j","usngStr","usngStr_temp","regexp","replace","isNaN","isFinite","k","isUSNG","inputStr","strregexp","RegExp","match","LLtoMGRS","mgrs_str","usng_str","GUsngtoLL","str","window","latlng","LLtoUSNG_nad27","usngstr","usng","map","polygons","document","addEventListener","google","maps","Map","getElementById","zoom","center","lng","cellIds","converter","forEach","bbox","cellId","vertices","bounds","LatLngBounds","vertex","MapLabel","text","position","polygon","Polygon","paths","fillOpacity","fillColor","data","setStyle","addGeoJson","r16","r17"],"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","file":"app.ef854a08.map","sourceRoot":"..","sourcesContent":["// Copyright (c) 2009 Larry Moore, larmoor@gmail.com\n//               2014 Mike Adair, Richard Greenwood, Didier Richard, Stephen Irons, Olivier Terral and Calvin Metcalf (proj4js)\n//               2014 Codice Foundation\n// Released under the MIT License; see\n// http://www.opensource.org/licenses/mit-license.php\n// or http://en.wikipedia.org/wiki/MIT_License\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation\n// files (the \"Software\"), to deal in the Software without\n// restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\n    var atanh = Math[\"atanh\"] || function (x) {\n        return Math.log((1 + x) / (1 - x)) / 2;\n    };\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n    var epsilon = typeof Number[\"EPSILON\"] === \"undefined\" ? Math.pow(2, -52) : Number[\"EPSILON\"];\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\n    var hypot = Math[\"hypot\"] || function (x, y) {\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=896264#c28\n        var max = 0;\n        var sumsq = 0;\n        for (var i = 0; i < arguments.length; i += 1) {\n            var arg = Math.abs(Number(arguments[i]));\n            var mar = max / arg;\n            var mar2 = mar * mar;\n            if (arg > max) {\n                sumsq *= mar2;\n                max = arg;\n            }\n            else {\n                sumsq += arg < 0 ? mar2 : 0;\n            }\n        }\n        return max === 1 / 0 ? 1 / 0 : max * Math.sqrt(sumsq);\n    };\n    var includes = function (list, item) {\n        return list.indexOf(item) >= 0;\n    };\n    var sinh = Math[\"sinh\"] || function (x) {\n        var y = Math.exp(x);\n        return (y - 1 / y) / 2;\n    };\n    var es = 0.08181918271;\n    /**\n     * This library was modified from the original usngs.js script to fix bugs, edge conditions, and limitations\n     * dealing with the different precision levels in usng/mgrs. It is by no means perfect! If you find a bug,\n     * submit it!\n     */\n    var eatanhe = function (x) {\n        return es * atanh(es * x);\n    };\n    var taupf = function (tauValue) {\n        var tau1 = hypot(1.0, tauValue);\n        var sig = sinh(eatanhe(tauValue / tau1));\n        return hypot(1.0, sig) * tauValue - sig * tau1;\n    };\n    var tauf = function (taupValue) {\n        var e2m = 1 - Math.pow(es, 2);\n        // To lowest order in e^2, taup = (1 - e^2) * tau = _e2m * tau; so use\n        // tau = taup/_e2m as a starting guess.  (This starting guess is the\n        // geocentric latitude which, to first order in the flattening, is equal\n        // to the conformal latitude.)  Only 1 iteration is needed for |lat| <\n        // 3.35 deg, otherwise 2 iterations are needed.  If, instead, tau = taup\n        // is used the mean number of iterations increases to 1.99 (2 iterations\n        // are needed except near tau = 0).\n        var tau = taupValue / e2m;\n        var stol = Math.sqrt(epsilon) / 10 * Math.max(1, Math.abs(taupValue));\n        // min iterations = 1, max iterations = 2; mean = 1.94; 5 iterations panic\n        for (var i = 0; i < 5; ++i) {\n            var taupa = taupf(tau);\n            var dtau = (taupValue - taupa) *\n                (1 + e2m * Math.pow(tau, 2)) /\n                (e2m * hypot(1, tau) * hypot(1, taupa));\n            tau += dtau;\n            if (!(Math.abs(dtau) >= stol)) {\n                break;\n            }\n        }\n        return tau;\n    };\n    var extend = function (objToExtend, obj) {\n        var keys = [];\n        for (var key in obj) {\n            keys.push(key);\n        }\n        var length = keys.length;\n        for (var i = 0; i < length; i++) {\n            objToExtend[keys[i]] = obj[keys[i]];\n        }\n        return objToExtend;\n    };\n    var Converter = function (options) {\n        options || (options = {});\n        this.initialize.apply(this, [options]);\n    };\n    exports.Converter = Converter;\n    extend(Converter.prototype, {\n        ngFunctionsPresent: true,\n        UNDEFINED_STR: \"undefined\",\n        UPS_REGEX: /^\\s*([ABYZ])\\s+(\\d+)mE\\s+(\\d+)mN\\s*$/i,\n        UTM_REGEX: /^(\\d+)[A-Z]?\\s+(\\d+)mE\\s+(\\d+)mN\\s*$/i,\n        /********************************* Constants ********************************/\n        FOURTHPI: Math.PI / 4,\n        DEG_2_RAD: Math.PI / 180,\n        RAD_2_DEG: 180.0 / Math.PI,\n        BLOCK_SIZE: 100000,\n        // (meters)\n        IS_NAD83_DATUM: true,\n        // For diagram of zone sets, please see the \"United States National Grid\" white paper.\n        GRIDSQUARE_SET_COL_SIZE: 8,\n        GRIDSQUARE_SET_ROW_SIZE: 20,\n        // UTM offsets\n        EASTING_OFFSET: 500000.0,\n        NORTHING_OFFSET: 10000000.0,\n        // scale factor of central meridian\n        k0: 0.9996,\n        // UPS conversion constants re: GeographicLib\n        a: 6378137,\n        es: es,\n        c: 1.00336,\n        rhoAdjusterValue: 12637275.1116,\n        falseUPSNorthing: 2000000,\n        falseUPSEasting: 2000000,\n        EQUATORIAL_RADIUS: undefined,\n        ECC_PRIME_SQUARED: undefined,\n        ECC_SQUARED: undefined,\n        num100kSets: 6,\n        originRowLetters: 'AFAFAF',\n        UTMGzdLetters: \"NPQRSTUVWX\",\n        USNGSqEast: \"ABCDEFGHJKLMNPQRSTUVWXYZ\",\n        USNGSqLetOdd: \"ABCDEFGHJKLMNPQRSTUV\",\n        USNGSqLetEven: \"FGHJKLMNPQRSTUVABCDE\",\n        initialize: function (options) {\n            if (options.datum && options.datum.toUpperCase() === 'NAD27') {\n                this.IS_NAD83_DATUM = false;\n            }\n            // check for NAD83\n            if (this.IS_NAD83_DATUM) {\n                this.EQUATORIAL_RADIUS = 6378137.0; // GRS80 ellipsoid (meters)\n                this.ECC_SQUARED = 0.006694380023;\n            }\n            // else NAD27 datum is assumed\n            else {\n                this.EQUATORIAL_RADIUS = 6378206.4; // Clarke 1866 ellipsoid (meters)\n                this.ECC_SQUARED = 0.006768658;\n            }\n            this.ECC_PRIME_SQUARED = this.ECC_SQUARED / (1 - this.ECC_SQUARED);\n            this.E1 = (1 - Math.sqrt(1 - this.ECC_SQUARED)) / (1 + Math.sqrt(1 - this.ECC_SQUARED));\n        },\n        // Number of digits to display for x,y coords\n        //  One digit:    10 km precision      eg. \"18S UJ 2 1\"\n        //  Two digits:   1 km precision       eg. \"18S UJ 23 06\"\n        //  Three digits: 100 meters precision eg. \"18S UJ 234 064\"\n        //  Four digits:  10 meters precision  eg. \"18S UJ 2348 0647\"\n        //  Five digits:  1 meter precision    eg. \"18S UJ 23480 06470\"\n        /************* retrieve zone number from latitude, longitude *************\n      \n         Zone number ranges from 1 - 60 over the range [-180 to +180]. Each\n         range is 6 degrees wide. Special cases for points outside normal\n         [-80 to +84] latitude zone.\n      \n         *************************************************************************/\n        getZoneNumber: function (lat, lon) {\n            lat = parseFloat(lat);\n            lon = parseFloat(lon);\n            // sanity check on input\n            if (lon > 360 || lon < -180 || lat > 84 || lat < -80) {\n                throw new Error('usng.js, getZoneNumber: invalid input. lat: ' + lat.toFixed(4) + ' lon: ' + lon.toFixed(4));\n            }\n            // convert 0-360 to [-180 to 180] range\n            var lonTemp = (lon + 180) - Math.floor((lon + 180) / 360) * 360 - 180;\n            var zoneNumber = Math.floor((lonTemp + 180) / 6) + 1;\n            // Handle special case of west coast of Norway\n            if (lat >= 56.0 && lat < 64.0 && lonTemp >= 3.0 && lonTemp < 12.0) {\n                zoneNumber = 32;\n            }\n            // Special zones for Svalbard\n            if (lat >= 72.0 && lat < 84.0) {\n                if (lonTemp >= 0.0 && lonTemp < 9.0) {\n                    zoneNumber = 31;\n                }\n                else if (lonTemp >= 9.0 && lonTemp < 21.0) {\n                    zoneNumber = 33;\n                }\n                else if (lonTemp >= 21.0 && lonTemp < 33.0) {\n                    zoneNumber = 35;\n                }\n                else if (lonTemp >= 33.0 && lonTemp < 42.0) {\n                    zoneNumber = 37;\n                }\n            }\n            return zoneNumber;\n        },\n        LLtoKM: function (lat1, lon1, lat2, lon2) {\n            var R = 6371000; // metres\n            var phi1 = lat1 * this.DEG_2_RAD;\n            var phi2 = lat2 * this.DEG_2_RAD;\n            var deltaPhi = (lat2 - lat1) * this.DEG_2_RAD;\n            var deltaLlamda = (lon2 - lon1) * this.DEG_2_RAD;\n            var a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\n                Math.cos(phi1) * Math.cos(phi2) *\n                    Math.sin(deltaLlamda / 2) * Math.sin(deltaLlamda / 2);\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            return R * c;\n        },\n        //this function does a very rough \"best fit\" to the center point\n        //this could definitely be improved\n        LLBboxtoUSNG: function (north, south, east, west) {\n            var northNum = parseFloat(north);\n            var southNum = parseFloat(south);\n            var eastNum = parseFloat(east);\n            var westNum = parseFloat(west);\n            // calculate midpoints for use in USNG string calculation\n            var lat = (northNum + southNum) / 2;\n            var lon = (eastNum + westNum) / 2;\n            // round down edge cases\n            if (lon >= 180) {\n                lon = 179.9;\n            }\n            else if (lon <= -180) {\n                lon = -179.9;\n            }\n            // round down edge cases\n            if (lat >= 90) {\n                lat = 89.9;\n            }\n            else if (lat <= -90) {\n                lat = -89.9;\n            }\n            // calculate distance between two points (North, West) and (South, East)\n            var R = 6371000; // metres\n            var phi1 = northNum * this.DEG_2_RAD;\n            var phi2 = southNum * this.DEG_2_RAD;\n            var deltaPhi = (southNum - northNum) * this.DEG_2_RAD;\n            var deltaLlamda = (westNum - eastNum) * this.DEG_2_RAD;\n            // trigonometry calculate distance\n            var height = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2);\n            height = R * 2 * Math.atan2(Math.sqrt(height), Math.sqrt(1 - height));\n            var length = Math.cos(phi1) * Math.cos(phi2) *\n                Math.sin(deltaLlamda / 2) * Math.sin(deltaLlamda / 2);\n            length = R * 2 * Math.atan2(Math.sqrt(length), Math.sqrt(1 - length));\n            var dist = Math.max(height, length);\n            // divide distance by square root of two\n            if (lon === 0 && (eastNum > 90 || eastNum < -90) && (westNum > 90 || westNum < -90)) {\n                lon = 180;\n            }\n            // calculate a USNG string with a precision based on distance\n            // precision is defined in LLtoUSNG declaration\n            var result;\n            if (dist > 100000) {\n                result = this.LLtoUSNG(lat, lon, 0);\n            }\n            else if (dist > 10000) {\n                result = this.LLtoUSNG(lat, lon, 1);\n            }\n            else if (dist > 1000) {\n                result = this.LLtoUSNG(lat, lon, 2);\n            }\n            else if (dist > 100) {\n                result = this.LLtoUSNG(lat, lon, 3);\n            }\n            else if (dist > 10) {\n                result = this.LLtoUSNG(lat, lon, 4);\n            }\n            else if (dist > 1) {\n                result = this.LLtoUSNG(lat, lon, 5);\n            }\n            else if (dist >= 0) {\n                result = this.LLtoUSNG(lat, lon, 6);\n            }\n            // result is a USNG string of the form DDL LL DDDDD DDDDD\n            // length of string will be based on the precision variable\n            return result;\n        },\n        serializeUTMUPS: function (utmups) {\n            var isUTM = typeof utmups.zoneNumber === \"number\" && utmups.zoneNumber !== 0;\n            var upsZoneLetter = !isUTM\n                && utmups.northPole\n                ? (utmups.easting < 2000000 ? 'Y' : 'Z')\n                : (utmups.northing < 2000000 ? 'A' : 'B');\n            var calculatedZone = isUTM ? utmups.zoneNumber : upsZoneLetter;\n            return calculatedZone + \" \" + Math.round(utmups.easting) + \"mE \" + Math.round(utmups.northing) + \"mN\";\n        },\n        serializeUTM: function (utm) {\n            return this.serializeUTMUPS(utm);\n        },\n        deserializeUTM: function (utmString) {\n            var _a;\n            var processInvalidUTM = function () {\n                throw new Error(\"Invalid UPS String: \" + utmString);\n            };\n            var zoneNumber, easting, northing;\n            try {\n                _a = this.UTM_REGEX.exec(utmString), zoneNumber = _a[1], easting = _a[2], northing = _a[3];\n            }\n            catch (err) {\n                processInvalidUTM();\n            }\n            if (zoneNumber < 1 || zoneNumber > 60) {\n                processInvalidUTM();\n            }\n            return {\n                zoneNumber: Number(zoneNumber),\n                easting: Number(easting),\n                northing: Number(northing)\n            };\n        },\n        /***************** convert latitude, longitude to UTM  *******************\n      \n         Converts lat/long to UTM coords.  Equations from USGS Bulletin 1532\n         (or USGS Professional Paper 1395 \"Map Projections - A Working Manual\",\n         by John P. Snyder, U.S. Government Printing Office, 1987.)\n      \n         East Longitudes are positive, West longitudes are negative.\n         North latitudes are positive, South latitudes are negative\n         lat and lon are in decimal degrees\n      \n         output is in the input array utmcoords\n         utmcoords[0] = easting\n         utmcoords[1] = northing (NEGATIVE value in southern hemisphere)\n         utmcoords[2] = zone\n      \n         ***************************************************************************/\n        LLtoUTM: function (lat, lon, utmcoords, zone) {\n            // utmcoords is a 2-D array declared by the calling routine\n            // note: input of lon = 180 or -180 with zone 60 not allowed; use 179.9999\n            if (utmcoords === void 0) { utmcoords = []; }\n            lat = parseFloat(lat);\n            lon = parseFloat(lon);\n            // Constrain reporting USNG coords to the latitude range [80S .. 84N]\n            /////////////////\n            if (lat > 84.0 || lat < -80.0) {\n                return this.UNDEFINED_STR;\n            }\n            //////////////////////\n            // sanity check on input - turned off when testing with Generic Viewer\n            if (lon > 360 || lon < -180 || lat > 90 || lat < -90) {\n                throw new Error('usng.js, LLtoUTM, invalid input. lat: ' + lat.toFixed(4) + ' lon: ' + lon.toFixed(4));\n            }\n            // Make sure the longitude is between -180.00 .. 179.99..\n            // Convert values on 0-360 range to this range.\n            var lonTemp = (lon + 180) - Math.floor((lon + 180) / 360) * 360 - 180;\n            var latRad = lat * this.DEG_2_RAD;\n            var lonRad = lonTemp * this.DEG_2_RAD;\n            // user-supplied zone number will force coordinates to be computed in a particular zone\n            var zoneNumber;\n            if (!zone) {\n                zoneNumber = this.getZoneNumber(lat, lon);\n            }\n            else {\n                zoneNumber = zone;\n            }\n            var lonOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin in middle of zone\n            var lonOriginRad = lonOrigin * this.DEG_2_RAD;\n            // compute the UTM Zone from the latitude and longitude\n            var UTMZone = zoneNumber + \"\" + this.UTMLetterDesignator(lat) + \" \";\n            var N = this.EQUATORIAL_RADIUS / Math.sqrt(1 - this.ECC_SQUARED * Math.sin(latRad) * Math.sin(latRad));\n            var T = Math.tan(latRad) * Math.tan(latRad);\n            var C = this.ECC_PRIME_SQUARED * Math.cos(latRad) * Math.cos(latRad);\n            var A = Math.cos(latRad) * (lonRad - lonOriginRad);\n            // Note that the term Mo drops out of the \"M\" equation, because phi\n            // (latitude crossing the central meridian, lambda0, at the origin of the\n            //  x,y coordinates), is equal to zero for UTM.\n            var M = this.EQUATORIAL_RADIUS * ((1 - this.ECC_SQUARED / 4\n                - 3 * (this.ECC_SQUARED * this.ECC_SQUARED) / 64\n                - 5 * (this.ECC_SQUARED * this.ECC_SQUARED * this.ECC_SQUARED) / 256) * latRad\n                - (3 * this.ECC_SQUARED / 8 + 3 * this.ECC_SQUARED * this.ECC_SQUARED / 32\n                    + 45 * this.ECC_SQUARED * this.ECC_SQUARED * this.ECC_SQUARED / 1024)\n                    * Math.sin(2 * latRad) + (15 * this.ECC_SQUARED * this.ECC_SQUARED / 256\n                + 45 * this.ECC_SQUARED * this.ECC_SQUARED * this.ECC_SQUARED / 1024) * Math.sin(4 * latRad)\n                - (35 * this.ECC_SQUARED * this.ECC_SQUARED * this.ECC_SQUARED / 3072) * Math.sin(6 * latRad));\n            var UTMEasting = (this.k0 * N * (A + (1 - T + C) * (A * A * A) / 6\n                + (5 - 18 * T + T * T + 72 * C - 58 * this.ECC_PRIME_SQUARED)\n                    * (A * A * A * A * A) / 120)\n                + this.EASTING_OFFSET);\n            var UTMNorthing = (this.k0 * (M + N * Math.tan(latRad) * ((A * A) / 2 + (5 - T + 9\n                * C + 4 * C * C) * (A * A * A * A) / 24\n                + (61 - 58 * T + T * T + 600 * C - 330 * this.ECC_PRIME_SQUARED)\n                    * (A * A * A * A * A * A) / 720)));\n            utmcoords[0] = UTMEasting;\n            utmcoords[1] = UTMNorthing;\n            utmcoords[2] = zoneNumber;\n            return {\n                easting: UTMEasting,\n                northing: UTMNorthing,\n                zoneNumber: zoneNumber\n            };\n        },\n        /***************** convert latitude, longitude to UTM  *******************\n        Uses N or S indicator instead of returning a negative Northing value\n        ***************************************************************************/\n        LLtoUTMwithNS: function (lat, lon, utmcoords, zone) {\n            this.LLtoUTM(lat, lon, utmcoords, zone);\n            if (utmcoords[1] < 0) {\n                utmcoords[1] += this.NORTHING_OFFSET;\n                utmcoords[3] = 'S';\n            }\n            else {\n                utmcoords[3] = 'N';\n            }\n        },\n        /***************** convert latitude, longitude to UTM  *******************\n        Uses N or S indicator instead of returning a negative Northing value\n        ***************************************************************************/\n        UTMtoLLwithNS: function (UTMNorthing, UTMEasting, UTMZoneNumber, accuracy, NorSIndicator) {\n            var result;\n            if (NorSIndicator === 'S') {\n                result = this.UTMtoLL(UTMNorthing - this.NORTHING_OFFSET, UTMEasting, UTMZoneNumber, accuracy);\n            }\n            else {\n                result = this.UTMtoLL(UTMNorthing, UTMEasting, UTMZoneNumber, accuracy);\n            }\n            return result;\n        },\n        deserializeUPS: function (upsString) {\n            try {\n                var _a = this.UPS_REGEX.exec(upsString), zoneLetter = _a[1], easting = _a[2], northing = _a[3];\n                this.UPStoLL({\n                    northPole: true,\n                    easting: Number(easting),\n                    northing: Number(northing)\n                });\n                return {\n                    northPole: includes([\"Y\", \"Z\"], zoneLetter.toUpperCase()),\n                    easting: Number(easting),\n                    northing: Number(northing)\n                };\n            }\n            catch (err) {\n                throw new Error(\"Invalid UPS String: \" + upsString);\n            }\n        },\n        /***************** convert latitude, longitude to UPS  *******************\n         Uses \"northPole\" boolean instead of returning a negative Northing value\n      \n         Input latitude is expected to be [-90, 90].\n         Input longitude is expected to be [-180, 180].\n      \n         This returns an object describing the UPS coordinates:\n         { northing: number, easting: number, northPole: bool }\n      \n         On invalid input throws an error.\n        ***************************************************************************/\n        LLtoUPS: function (lat, lon) {\n            var isLatLonCoordinatesPairInvalid = !(typeof lat === \"number\"\n                && typeof lon === \"number\"\n                && lat >= -90 && lat <= 90\n                && lon >= -180 && lon <= 180);\n            if (isLatLonCoordinatesPairInvalid) {\n                throw new Error('Invalid Lat/Lon coordinates: ' + lat + ', ' + lon);\n            }\n            var northPole = lat >= 0;\n            var tau = Math.tan(Math.abs(lat) * this.DEG_2_RAD);\n            var taup = taupf.call(this, tau);\n            var rhoStep1 = hypot(1, taup) + Math.abs(taup);\n            var rhoStep2 = Math.abs(lat) !== 90 ? 1 / rhoStep1 : 0;\n            var rhoStep3 = taup >= 0 ? rhoStep2 : rhoStep1;\n            var rho = rhoStep3 * this.rhoAdjusterValue;\n            var x = Math.sin(lon * this.DEG_2_RAD) * rho;\n            var y = Math.cos(lon * this.DEG_2_RAD) * (northPole ? -rho : rho);\n            return {\n                northing: y + this.falseUPSNorthing,\n                easting: x + this.falseUPSEasting,\n                northPole: northPole\n            };\n        },\n        /***************** convert latitude, longitude to UPS  *******************\n         Input:  valid UPS coordinates object, example\n           {northPole: true, northing: 1234567, easting:  987654}\n         Returns Lat/Lon object with latitide is expected to be [-90, 90],\n         and longitude is expected to be [-180, 180].\n      \n         On invalid input throws an error.\n         ***************************************************************************/\n        UPStoLL: function (upsCoordinates) {\n            var _this = this;\n            var validateUPSCoordinates = function () {\n                var processInvalidUPS = function () {\n                    throw new Error('Invalid UPS object: ' + JSON.stringify(upsCoordinates));\n                };\n                var processValidUPS = function () {\n                    var adjustedUPS = {\n                        northPole: upsCoordinates.northPole,\n                        northing: upsCoordinates.northing - _this.falseUPSNorthing,\n                        easting: upsCoordinates.easting - _this.falseUPSEasting\n                    };\n                    var rho = hypot(adjustedUPS.easting, adjustedUPS.northing);\n                    var t = rho !== 0.0\n                        ? rho / _this.rhoAdjusterValue\n                        : Math.pow(epsilon, 2);\n                    var taup = (1 / t - t) / 2;\n                    var tau = tauf(taup);\n                    var lat = (adjustedUPS.northPole ? 1 : -1) * Math.atan(tau) * _this.RAD_2_DEG;\n                    var lon = Math.atan2(adjustedUPS.easting, adjustedUPS.northPole ? -adjustedUPS.northing : adjustedUPS.northing) *\n                        _this.RAD_2_DEG;\n                    return { lat: lat, lon: lon };\n                };\n                var isUPSObjectDefined = typeof upsCoordinates !== \"undefined\";\n                var isUPSMetricComponentValid = function (metricValue) { return isUPSObjectDefined\n                    && typeof upsCoordinates.northPole === \"boolean\"\n                    && typeof metricValue === \"number\"\n                    && metricValue >= 800000\n                    && metricValue <= 3200000; };\n                var isUPSEastingValid = isUPSMetricComponentValid(upsCoordinates.easting);\n                var isUPSNorthingValid = isUPSMetricComponentValid(upsCoordinates.northing);\n                var isUPSValid = isUPSEastingValid && isUPSNorthingValid;\n                return {\n                    processConversion: isUPSValid\n                        ? processValidUPS\n                        : processInvalidUPS\n                };\n            };\n            return validateUPSCoordinates().processConversion();\n        },\n        /***************** convert UTM/UPS to latitude, longitude *******************\n         Input:  UTM/UPS coordinates in either string or object form, examples:\n           {northPole: true, northing: 1234567, easting: 987654 zoneNumber: 0}\n           \"32 1234567mE 6543210mN\"\n           \"A 2222222mE 2222222mN\"\n         Returns Lat/Lon object with latitide is expected to be [-90, 90],\n         and longitude is expected to be [-180, 180].\n      \n         On invalid input throws an error.\n         ***************************************************************************/\n        UTMUPStoLL: function (utmupsInput) {\n            var isInputString = typeof utmupsInput === \"string\";\n            try {\n                var isInputUPSString = isInputString\n                    && includes([\"A\", \"B\", \"Y\", \"Z\"], utmupsInput.charAt(0).toUpperCase());\n                var isInputUPSObject = !isInputString\n                    && typeof utmupsInput.zoneNumber === \"number\" && utmupsInput.zoneNumber === 0;\n                if (isInputUPSString || isInputUPSObject) {\n                    return this.UPStoLL(isInputString ? this.deserializeUPS(utmupsInput) : utmupsInput);\n                }\n                else {\n                    var utm = isInputString ? this.deserializeUTM(utmupsInput) : utmupsInput;\n                    return this.UTMtoLL(utm.northing, utm.easting, utm.zoneNumber);\n                }\n            }\n            catch (err) {\n                throw new Error(\"Invalid UTM/UPS input: \" + utmupsInput);\n            }\n        },\n        LLtoUTMUPSObject: function (lat, lon) {\n            // sanity check on input - turned off when testing with Generic Viewer\n            if (lon > 180 || lon < -180 || lat > 90 || lat < -90) {\n                throw new Error(\"usng.js, LLtoUTMUPS, invalid input. lat: \" + lat.toFixed(4) + \" lon: \" + lon.toFixed(4));\n            }\n            // Constrain reporting UTM coords to the latitude range [80S .. 84N]\n            return (lat > 84.0 || lat < -80.0)\n                ? __assign({}, this.LLtoUPS(lat, lon), { zoneNumber: 0 }) : __assign({}, this.LLtoUTM(lat, lon), { northPole: lat >= 0 });\n        },\n        LLtoUTMUPS: function (lat, lon) {\n            return this.serializeUTMUPS(this.LLtoUTMUPSObject(lat, lon));\n        },\n        /***************** convert latitude, longitude to USNG  *******************\n         Converts lat/lng to USNG coordinates.  Calls LLtoUTM first, then\n         converts UTM coordinates to a USNG string.\n      \n         Returns string of the format: DDL LL DDDD DDDD (4-digit precision), eg:\n         \"18S UJ 2286 0705\" locates Washington Monument in Washington, D.C.\n         to a 10-meter precision.\n      \n         Precision refers to levels of USNG precision. Ie a precision of\n         0 returns a string in the form DDL\n         1 returns a string in the form DDL LL\n         2 returns a string in the form DDL LL D D\n         etc\n      \n         ***************************************************************************/\n        LLtoUSNG: function (lat, lon, precision) {\n            // make lon between -180 & 180\n            if (lon < -180) {\n                lon += 360;\n            }\n            else if (lon > 180) {\n                lon -= 360;\n            }\n            // parse lat & long parameters to floats\n            lat = parseFloat(lat);\n            lon = parseFloat(lon);\n            // convert lat/lon to UTM coordinates\n            var coords = [];\n            this.LLtoUTM(lat, lon, coords);\n            var UTMEasting = coords[0];\n            var UTMNorthing = coords[1];\n            // ...then convert UTM to USNG\n            // southern hemisphere case\n            if (lat < 0) {\n                // Use offset for southern hemisphere\n                UTMNorthing += this.NORTHING_OFFSET;\n            }\n            var zoneNumber = this.getZoneNumber(lat, lon);\n            var USNGLetters = this.findGridLetters(zoneNumber, UTMNorthing, UTMEasting);\n            // UTM northing and easting is the analogue of USNG letters + USNG northing and easting\n            // so remove the component of UTM northing and easting that corresponds with the USNG letters\n            var USNGNorthing = Math.round(UTMNorthing) % this.BLOCK_SIZE;\n            var USNGEasting = Math.round(UTMEasting) % this.BLOCK_SIZE;\n            // parse precision to something we understand\n            if (typeof precision === 'undefined' || precision < 0) {\n                precision = 0;\n            }\n            // digitPrecision is to account for just the numerical portion of the USNG string\n            // the last 0-10 characters of the USNG string\n            var digitPrecision = 0;\n            // ensure that digitPrecision is between 0-5 because USNG is specified to up to 5 digits\n            if (precision > 0) {\n                digitPrecision = precision - 1;\n            }\n            if (digitPrecision > 5) {\n                digitPrecision = 5;\n            }\n            // truncate USNG string digits to achieve specified precision\n            USNGNorthing = Math.floor(USNGNorthing / Math.pow(10, (5 - digitPrecision)));\n            USNGEasting = Math.floor(USNGEasting / Math.pow(10, (5 - digitPrecision)));\n            // begin building USNG string \"DDL\"\n            var USNG = zoneNumber + this.UTMLetterDesignator(lat);\n            // add 100k meter grid letters to USNG string \"DDL LL\"\n            if (precision >= 1) {\n                USNG += \" \" + USNGLetters;\n            }\n            // REVISIT: Modify to incorporate dynamic precision ?\n            // if requested precision is higher than USNG northing or easting, pad front\n            // with zeros\n            // add easting and northing to USNG string \"DDL LL D+ D+\"\n            if (digitPrecision >= 1) {\n                USNG += \" \";\n                for (var i = String(USNGEasting).length; i < digitPrecision; i++) {\n                    USNG += \"0\";\n                }\n                USNG += USNGEasting + \" \";\n            }\n            if (digitPrecision >= 1) {\n                for (i = String(USNGNorthing).length; i < digitPrecision; i++) {\n                    USNG += \"0\";\n                }\n                USNG += USNGNorthing;\n            }\n            // return USNG string of the form \"DDL LL DDDDD DDDDD\"\n            // length of string depends on precision specified\n            return USNG;\n        },\n        /************** retrieve grid zone designator letter **********************\n      \n         This routine determines the correct UTM letter designator for the given\n         latitude returns 'Z' if latitude is outside the UTM limits of 84N to 80S\n      \n         Returns letter designator for a given latitude.\n         Letters range from C (-80 lat) to X (+84 lat), with each zone spanning\n         8 degrees of latitude.\n      \n         ***************************************************************************/\n        UTMLetterDesignator: function (lat) {\n            lat = parseFloat(lat);\n            if (lat > 84 || lat < -80) {\n                return 'Z';\n            }\n            else {\n                var index = (lat + 80) / 8;\n                if (index >= 6)\n                    index++; // skip 'I'\n                if (index >= 12)\n                    index++; // skip 'O'\n                if (index >= 22)\n                    index--; // adjust for 80 to 84, which should be 'X'\n                return String.fromCharCode(67 /* C */ + index);\n            }\n        },\n        /****************** Find the set for a given zone. ************************\n      \n         There are six unique sets, corresponding to individual grid numbers in\n         sets 1-6, 7-12, 13-18, etc. Set 1 is the same as sets 7, 13, ..; Set 2\n         is the same as sets 8, 14, ..\n      \n         See p. 10 of the \"United States National Grid\" white paper.\n      \n         ***************************************************************************/\n        findSet: function (zoneNum) {\n            zoneNum = parseInt(zoneNum);\n            zoneNum = zoneNum % 6;\n            switch (zoneNum) {\n                case 0:\n                    return 6;\n                    break;\n                case 1:\n                    return 1;\n                    break;\n                case 2:\n                    return 2;\n                    break;\n                case 3:\n                    return 3;\n                    break;\n                case 4:\n                    return 4;\n                    break;\n                case 5:\n                    return 5;\n                    break;\n                default:\n                    return -1;\n                    break;\n            }\n        },\n        /**************************************************************************\n         Retrieve the square identification for a given coordinate pair & zone\n         See \"lettersHelper\" function documentation for more details.\n      \n         ***************************************************************************/\n        findGridLetters: function (zoneNum, northing, easting) {\n            zoneNum = parseInt(zoneNum);\n            northing = parseFloat(northing);\n            easting = parseFloat(easting);\n            var row = 1;\n            // northing coordinate to single-meter precision\n            var north_1m = Math.round(northing);\n            // Get the row position for the square identifier that contains the point\n            while (north_1m >= this.BLOCK_SIZE) {\n                north_1m = north_1m - this.BLOCK_SIZE;\n                row++;\n            }\n            // cycle repeats (wraps) after 20 rows\n            row = row % this.GRIDSQUARE_SET_ROW_SIZE;\n            var col = 0;\n            // easting coordinate to single-meter precision\n            var east_1m = Math.round(easting);\n            // Get the column position for the square identifier that contains the point\n            while (east_1m >= this.BLOCK_SIZE) {\n                east_1m = east_1m - this.BLOCK_SIZE;\n                col++;\n            }\n            // cycle repeats (wraps) after 8 columns\n            col = col % this.GRIDSQUARE_SET_COL_SIZE;\n            return this.lettersHelper(this.findSet(zoneNum), row, col);\n        },\n        /**************************************************************************\n         Retrieve the Square Identification (two-character letter code), for the\n         given row, column and set identifier (set refers to the zone set:\n         zones 1-6 have a unique set of square identifiers; these identifiers are\n         repeated for zones 7-12, etc.)\n      \n         See p. 10 of the \"United States National Grid\" white paper for a diagram\n         of the zone sets.\n      \n         ***************************************************************************/\n        lettersHelper: function (setter, row, col) {\n            // handle case of last row\n            if (row == 0) {\n                row = this.GRIDSQUARE_SET_ROW_SIZE - 1;\n            }\n            else {\n                row--;\n            }\n            // handle case of last column\n            if (col == 0) {\n                col = this.GRIDSQUARE_SET_COL_SIZE - 1;\n            }\n            else {\n                col--;\n            }\n            var l1, l2;\n            switch (setter) {\n                case 1:\n                    l1 = \"ABCDEFGH\"; // column ids\n                    l2 = this.USNGSqLetOdd; // row ids\n                    return l1.charAt(col) + l2.charAt(row);\n                    break;\n                case 2:\n                    l1 = \"JKLMNPQR\";\n                    l2 = this.USNGSqLetEven;\n                    return l1.charAt(col) + l2.charAt(row);\n                    break;\n                case 3:\n                    l1 = \"STUVWXYZ\";\n                    l2 = this.USNGSqLetOdd;\n                    return l1.charAt(col) + l2.charAt(row);\n                    break;\n                case 4:\n                    l1 = \"ABCDEFGH\";\n                    l2 = this.USNGSqLetEven;\n                    return l1.charAt(col) + l2.charAt(row);\n                    break;\n                case 5:\n                    l1 = \"JKLMNPQR\";\n                    l2 = this.USNGSqLetOdd;\n                    return l1.charAt(col) + l2.charAt(row);\n                    break;\n                case 6:\n                    l1 = \"STUVWXYZ\";\n                    l2 = this.USNGSqLetEven;\n                    return l1.charAt(col) + l2.charAt(row);\n                    break;\n            }\n        },\n        /**************  convert UTM coords to decimal degrees *********************\n      \n         Equations from USGS Bulletin 1532 (or USGS Professional Paper 1395)\n         East Longitudes are positive, West longitudes are negative.\n         North latitudes are positive, South latitudes are negative.\n      \n         Expected Input args:\n         UTMNorthing   : northing-m (numeric), eg. 432001.8\n         southern hemisphere NEGATIVE from equator ('real' value - 10,000,000)\n         UTMEasting    : easting-m  (numeric), eg. 4000000.0\n         UTMZoneNumber : 6-deg longitudinal zone (numeric), eg. 18\n      \n         lat-lon coordinates are turned in the object 'ret' : ret.lat and ret.lon\n      \n         ***************************************************************************/\n        UTMtoLL: function (UTMNorthing, UTMEasting, UTMZoneNumber, accuracy) {\n            // remove 500,000 meter offset for longitude\n            var xUTM = parseFloat(UTMEasting) - this.EASTING_OFFSET;\n            var yUTM = parseFloat(UTMNorthing);\n            var zoneNumber = parseInt(UTMZoneNumber);\n            // origin longitude for the zone (+3 puts origin in zone center)\n            var lonOrigin = (zoneNumber - 1) * 6 - 180 + 3;\n            // M is the \"true distance along the central meridian from the Equator to phi\n            // (latitude)\n            var M = yUTM / this.k0;\n            var mu = M / (this.EQUATORIAL_RADIUS * (1 - this.ECC_SQUARED / 4 - 3 * this.ECC_SQUARED *\n                this.ECC_SQUARED / 64 - 5 * this.ECC_SQUARED * this.ECC_SQUARED * this.ECC_SQUARED / 256));\n            // phi1 is the \"footprint latitude\" or the latitude at the central meridian which\n            // has the same y coordinate as that of the point (phi (lat), lambda (lon) ).\n            var phi1Rad = mu + (3 * this.E1 / 2 - 27 * this.E1 * this.E1 * this.E1 / 32) * Math.sin(2 * mu)\n                + (21 * this.E1 * this.E1 / 16 - 55 * this.E1 * this.E1 * this.E1 * this.E1 / 32) * Math.sin(4 * mu)\n                + (151 * this.E1 * this.E1 * this.E1 / 96) * Math.sin(6 * mu);\n            var phi1 = phi1Rad * this.RAD_2_DEG;\n            // Terms used in the conversion equations\n            var N1 = this.EQUATORIAL_RADIUS / Math.sqrt(1 - this.ECC_SQUARED * Math.sin(phi1Rad) *\n                Math.sin(phi1Rad));\n            var T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n            var C1 = this.ECC_PRIME_SQUARED * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n            var R1 = this.EQUATORIAL_RADIUS * (1 - this.ECC_SQUARED) / Math.pow(1 - this.ECC_SQUARED *\n                Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n            var D = xUTM / (N1 * this.k0);\n            // Calculate latitude, in decimal degrees\n            var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10\n                * C1 - 4 * C1 * C1 - 9 * this.ECC_PRIME_SQUARED) * D * D * D * D / 24 + (61 + 90 *\n                T1 + 298 * C1 + 45 * T1 * T1 - 252 * this.ECC_PRIME_SQUARED - 3 * C1 * C1) * D * D *\n                D * D * D * D / 720);\n            lat = lat * this.RAD_2_DEG;\n            if (lat === 0) {\n                lat = 0.001;\n            }\n            // Calculate longitude, in decimal degrees\n            var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 *\n                C1 * C1 + 8 * this.ECC_PRIME_SQUARED + 24 * T1 * T1) * D * D * D * D * D / 120) /\n                Math.cos(phi1Rad);\n            lon = lonOrigin + lon * this.RAD_2_DEG;\n            var result = {};\n            if (accuracy) {\n                if (accuracy <= 100000) {\n                    var northEast = this.UTMtoLL(UTMNorthing + accuracy, UTMEasting + accuracy, UTMZoneNumber);\n                    return {\n                        north: northEast.lat,\n                        east: northEast.lon,\n                        south: lat,\n                        west: lon\n                    };\n                }\n                else {\n                    var zoneLetter = this.UTMLetterDesignator(lat);\n                    var lats = this.zoneLetterLats(zoneLetter);\n                    var lons = this.zoneNumberLons(UTMZoneNumber);\n                    if (lats && lons) {\n                        return {\n                            north: lats.north,\n                            south: lats.south,\n                            east: lons.east,\n                            west: lons.west\n                        };\n                    }\n                    else {\n                        return {};\n                    }\n                }\n            }\n            else {\n                return { lat: lat, lon: lon };\n            }\n        },\n        zoneNumberLons: function (zone) {\n            var east = -180.0 + (6 * zone);\n            var west = east - 6;\n            return {\n                east: east,\n                west: west\n            };\n        },\n        zoneLetterLats: function (letter) {\n            switch (letter) {\n                case 'C':\n                    return { south: -80.0, north: -72.0 };\n                case 'D':\n                    return { south: -72.0, north: -64.0 };\n                case 'E':\n                    return { south: -64.0, north: -56.0 };\n                case 'F':\n                    return { south: -56.0, north: -48.0 };\n                case 'G':\n                    return { south: -48.0, north: -40.0 };\n                case 'H':\n                    return { south: -40.0, north: -32.0 };\n                case 'J':\n                    return { south: -32.0, north: -24.0 };\n                case 'K':\n                    return { south: -24.0, north: -16.0 };\n                case 'L':\n                    return { south: -16.0, north: -8.0 };\n                case 'M':\n                    return { south: -8.0, north: -0.01 };\n                case 'N':\n                    return { south: 0.01, north: 8.0 };\n                case 'P':\n                    return { south: 8.0, north: 16.0 };\n                case 'Q':\n                    return { south: 16.0, north: 24.0 };\n                case 'R':\n                    return { south: 24.0, north: 32.0 };\n                case 'S':\n                    return { south: 32.0, north: 40.0 };\n                case 'T':\n                    return { south: 40.0, north: 48.0 };\n                case 'U':\n                    return { south: 48.0, north: 56.0 };\n                case 'V':\n                    return { south: 56.0, north: 64.0 };\n                case 'W':\n                    return { south: 64.0, north: 72.0 };\n                case 'X':\n                    return { south: 72.0, north: 84.0 };\n            }\n        },\n        /********************** USNG to UTM **************************************\n      \n         The Follwing functions are used to convert USNG Cords to UTM Cords.\n      \n         ***************************************************************************/\n        /***********************************************************************************\n      \n         USNGtoUTM(zone,let,sq1,sq2,east,north,ret)\n         Expected Input args:\n         zone: Zone (integer), eg. 18\n         let: Zone letter, eg S\n         sq1:  1st USNG square letter, eg U\n         sq2:  2nd USNG square Letter, eg J\n         east:  Easting digit string, eg 4000\n         north:  Northing digit string eg 4000\n         ret:  saves zone,let,Easting and Northing as properties ret\n      \n         ***********************************************************************************/\n        USNGtoUTM: function (zone, letter, sq1, sq2, east, north, ret) {\n            // easting goes from 100,000 - 800,000 and repeats across zones\n            // A,J,S correspond with 100,000, B,K,T correspond with 200,000 etc\n            var eastingArray = [\"\", \"AJS\", \"BKT\", \"CLU\", \"DMV\", \"ENW\", \"FPX\", \"GQY\", \"HRZ\"];\n            // zoneBase - southern edge of N-S zones of millions of meters\n            var zoneBase = [1.1, 2.0, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1, 0, 0.8, 1.7, 2.6, 3.5, 4.4, 5.3, 6.2, 7.0, 7.9];\n            // multiply zone bases by 1 million to get the proper length for each\n            for (var i = 0; i < zoneBase.length; i++) {\n                zoneBase[i] = zoneBase[i] * 1000000;\n            }\n            // northing goes from 0 - 1,900,000. A corresponds with 0, B corresponds with 200,000, V corresponds with 1,900,000\n            var northingArrayOdd = \"ABCDEFGHJKLMNPQRSTUV\";\n            // even numbered zones have the northing letters offset from the odd northing. So, F corresponds with 0, G corresponds\n            // with 100,000 and E corresponds with 1,900,000\n            var northingArrayEven = \"FGHJKLMNPQRSTUVABCDE\";\n            var easting = -1;\n            for (var i = 0; i < eastingArray.length; i++) {\n                // loop through eastingArray until sq1 is found\n                // the index of the string the letter is in will be the base easting, as explained in the declaration\n                // of eastingArray\n                if (eastingArray[i].indexOf(sq1) != -1) {\n                    // multiply by 100,000 to get the proper base easting\n                    easting = i * 100000;\n                    // add the east parameter to get the total easting\n                    if (east) {\n                        easting = easting + Number(east) * Math.pow(10, 5 - east.length);\n                    }\n                    break;\n                }\n            }\n            var northing = 0;\n            if (sq2) {\n                // if zone number is even, use northingArrayEven, if odd, use northingArrayOdd\n                // similar to finding easting, the index of sq2 corresponds with the base easting\n                if (zone % 2 == 0) {\n                    northing = northingArrayEven.indexOf(sq2) * 100000;\n                }\n                else if (zone % 2 == 1) {\n                    northing = northingArrayOdd.indexOf(sq2) * 100000;\n                }\n                // we can exploit the repeating behavior of northing to find what the total northing should be\n                // iterate through the horizontal zone bands until our northing is greater than the zoneBase of our zone\n                while (northing < zoneBase[\"CDEFGHJKLMNPQRSTUVWX\".indexOf(letter)]) {\n                    northing = northing + 2000000;\n                }\n                if (north) {\n                    // add the north parameter to get the total northing\n                    northing = northing + Number(north) * Math.pow(10, 5 - north.length);\n                }\n            }\n            else {\n                // add approximately half of the height of one large region to ensure we're in the right zone\n                northing = zoneBase[\"CDEFGHJKLMNPQRSTUVWX\".indexOf(letter)] + 499600;\n            }\n            // set return object\n            ret.N = Math.floor(northing);\n            ret.E = Math.floor(easting);\n            ret.zone = zone;\n            ret.letter = letter;\n        },\n        get100kSetForZone: function (zoneNumber) {\n            var setParm = zoneNumber % this.num100kSets;\n            if (setParm == 0)\n                setParm = this.num100kSets;\n            return setParm;\n        },\n        getNorthingFromChar: function (letter, setVal) {\n            if (letter === '' || typeof letter === 'undefined') {\n                return 0;\n            }\n            if (letter > 'V') {\n                throw (\"MGRSPoint given invalid Northing \"\n                    + letter);\n            }\n            // rowOrigin is the letter at the origin of the set for the\n            // column\n            var curRow = this.originRowLetters.charCodeAt(setVal - 1);\n            var northingValue = 0.0;\n            var rewindMarker = false;\n            while (curRow !== letter.charCodeAt(0)) {\n                curRow++;\n                if (curRow === 'I'.charCodeAt(0))\n                    curRow++;\n                if (curRow === 'O'.charCodeAt(0))\n                    curRow++;\n                // fixing a bug making whole application hang in this loop\n                // when 'n' is a wrong character\n                if (curRow > 'V'.charCodeAt(0)) {\n                    if (rewindMarker) { // making sure that this loop ends\n                        throw (\"Bad character: \" + String.fromCharCode(curRow));\n                    }\n                    curRow = 'A'.charCodeAt(0);\n                    rewindMarker = true;\n                }\n                northingValue += 0.1;\n            }\n            return northingValue;\n        },\n        // parse a USNG string and feed results to USNGtoUTM, then the results of that to UTMtoLL\n        USNGtoLL: function (usngStr_input, getCenter) {\n            var usngp = {};\n            this.parseUSNG_str(usngStr_input, usngp);\n            var coords = {};\n            // convert USNG coords to UTM; this routine counts digits and sets precision\n            this.USNGtoUTM(usngp.zone, usngp.let, usngp.sq1, usngp.sq2, usngp.east, usngp.north, coords);\n            // southern hemisphere case\n            if (usngp.let < 'N') {\n                coords.N -= this.NORTHING_OFFSET;\n            }\n            var accuracy;\n            if (!getCenter) {\n                accuracy = 100000.0 / Math.pow(10, usngp.precision);\n            }\n            var result = this.UTMtoLL(coords.N, coords.E, usngp.zone, accuracy);\n            return result;\n        },\n        // convert lower-case characters to upper case, remove space delimeters, separate string into parts\n        parseUSNG_str: function (usngStr_input, parts) {\n            var j = 0;\n            var usngStr;\n            var usngStr_temp;\n            if (!usngStr_input) {\n                return 0;\n            }\n            usngStr_temp = usngStr_input.toUpperCase();\n            // put usgn string in 'standard' form with no space delimiters\n            var regexp = /%20/g;\n            usngStr = usngStr_temp.replace(regexp, \"\");\n            regexp = / /g;\n            usngStr = usngStr.replace(regexp, \"\");\n            if (usngStr.length < 2) {\n                return 0;\n            }\n            // break usng string into its component pieces\n            // if 2 digit zone\n            if (!isNaN(parseFloat(usngStr.charAt(1))) && isFinite(usngStr.charAt(1))) {\n                parts.zone = usngStr.charAt(j++) * 10 + usngStr.charAt(j++) * 1;\n            }\n            else { // else single digit zone\n                parts.zone = usngStr.charAt(j++) * 1;\n            }\n            parts.let = usngStr.charAt(j++);\n            parts.sq1 = usngStr.charAt(j++);\n            parts.sq2 = usngStr.charAt(j++);\n            parts.precision = (usngStr.length - j) / 2;\n            parts.east = '';\n            parts.north = '';\n            var k;\n            for (k = 0; k < parts.precision; k++) {\n                parts.east += usngStr.charAt(j++);\n            }\n            if (usngStr[j] == \" \") {\n                j++;\n            }\n            for (k = 0; k < parts.precision; k++) {\n                parts.north += usngStr.charAt(j++);\n            }\n        },\n        // checks a string to see if it is valid USNG;\n        //    if so, returns the string in all upper case, no delimeters\n        //    if not, returns 0\n        isUSNG: function (inputStr) {\n            var usngStr;\n            var strregexp;\n            // convert all letters to upper case\n            usngStr = inputStr.toUpperCase();\n            // get rid of space delimeters\n            var regexp = /%20/g;\n            usngStr = usngStr.replace(regexp, \"\");\n            regexp = / /g;\n            usngStr = usngStr.replace(regexp, \"\");\n            if (usngStr.length > 15) {\n                return 0;\n            }\n            strregexp = new RegExp(\"^[0-9]{2}[CDEFGHJKLMNPQRSTUVWX]$\");\n            if (usngStr.match(strregexp)) {\n                return 0;\n            }\n            strregexp = new RegExp(\"^[0-9]{2}[CDEFGHJKLMNPQRSTUVWX][ABCDEFGHJKLMNPQRSTUVWXYZ][ABCDEFGHJKLMNPQRSTUV]([0-9][0-9]){0,5}$\");\n            if (!usngStr.match(strregexp)) {\n                return 0;\n            }\n            if (usngStr.length < 7) {\n                return 0;\n            }\n            // all tests passed...return the upper-case, non-delimited string\n            return usngStr;\n        },\n        // create a Military Grid Reference System string.  this is the same as a USNG string, but\n        //    with no spaces.  space delimiters are optional but allowed in USNG, but are not allowed\n        //    in MGRS notation.  but the numbers are the same.\n        LLtoMGRS: function (lat, lon, precision) {\n            var mgrs_str;\n            var usng_str = this.LLtoUSNG(lat, lon, precision);\n            // remove space delimiters to conform to mgrs spec\n            var regexp = / /g;\n            mgrs_str = usng_str.replace(regexp, \"\");\n            return mgrs_str;\n        },\n        // wrapper function specific to Google Maps, to make a converstion to lat/lng return a GLatLon instance.\n        // takes a usng string, converts it to lat/lng using a call to USNGtoLL,\n        // and returns an instance of GLatLng\n        GUsngtoLL: function (str) {\n            if (typeof window['GLatLng'] === 'function') {\n                var latlng = [];\n                this.USNGtoLL(str, latlng);\n                return new window['GLatLng'](latlng[0], latlng[1]);\n            }\n            else {\n                throw new Error(\"GLatLng not defined.\");\n            }\n        },\n        LLtoUSNG_nad27: function (lat, lon, precision) {\n            var usngstr;\n            // set ellipsoid to Clarke 1866 (meters)\n            this.EQUATORIAL_RADIUS = 6378206.4;\n            this.ECC_SQUARED = 0.006768658;\n            usngstr = this.LLtoUSNG(lat, lon, precision);\n            // reset GRS80 ellipsoid\n            this.EQUATORIAL_RADIUS = 6378137.0;\n            this.ECC_SQUARED = 0.006694380023;\n            return usngstr + \" (NAD27)\";\n        }\n    });\n});\n","import r16 from './data/MGRS_100kmSQ_ID_16R.json'\nimport r17 from './data/MGRS_100kmSQ_ID_17R.json'\n\nconst usng = require('./libs/usng.js/dist/usng.js')\nlet map = null;\nlet polygons = [];\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 8,\n    center: {lat: 29.69722182370533, lng: -83.97016015625002}\n  });\n\n  let cellIds =\n   ['16RFV', '16RGV', '17RKQ', '17RLQ',\n    '16RFU', '16RGU', '17RKP', '17RLP',\n    '16RFT', '16RGT', '17RKN', '17RLN',\n    '16RFS', '16RGS', '17RKM', '17RLM'];\n\n  const converter = new usng.Converter();\n\n  cellIds.forEach(cellId => {\n    const bbox = converter.USNGtoLL(cellId);\n\n    const vertices = [\n      {lat: bbox.north, lng: bbox.west},\n      {lat: bbox.north, lng: bbox.east},\n      {lat: bbox.south, lng: bbox.east},\n      {lat: bbox.south, lng: bbox.west}\n    ];\n\n    const bounds = new google.maps.LatLngBounds();\n    vertices.forEach(vertex => {\n      bounds.extend(vertex);\n    });\n\n    new MapLabel({\n      text: cellId,\n      position: bounds.getCenter(),\n      map: map\n    })\n\n    const polygon = new google.maps.Polygon({\n      paths: vertices,\n      map: map,\n      fillOpacity: 0.1,\n      fillColor: 'red'\n    });\n    polygons.push(polygon);\n  });\n\n  // mgrs grid reference, exported from shp\n  map.data.setStyle({\n    fillOpacity: 0.1,\n    fillColor: 'green'\n  })\n  map.data.addGeoJson(r16);\n  map.data.addGeoJson(r17);\n});"]}