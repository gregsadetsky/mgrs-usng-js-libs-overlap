{"version":3,"sources":["node_modules/mgrs/mgrs.js","app.js"],"names":["forward","inverse","toPoint","NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","ll","accuracy","encode","LLtoUTM","lat","lon","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","degToRad","deg","Math","PI","radToDeg","rad","Lat","Long","a","eccSquared","k0","LongOrigin","eccPrimeSquared","N","T","C","M","LatRad","LongRad","LongOriginRad","ZoneNumber","floor","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","northing","trunc","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","e1","N1","T1","C1","R1","D","mu","phi1Rad","x","y","pow","result","topRight","LetterDesignator","seasting","snorthing","get100kID","substr","length","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","i","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","String","fromCharCode","mgrsString","hunK","sb","testChar","test","charAt","parseInt","substring","set","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","sep","sepEasting","sepNorthing","accuracyBonus","sepEastingString","sepNorthingString","parseFloat","e","curCol","eastingValue","rewindMarker","n","curRow","northingValue","require","document","addEventListener","map","google","maps","Map","getElementById","zoom","center","lng","console","log"],"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","file":"app.750accdc.map","sourceRoot":"..","sourcesContent":["\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.trunc(UTMNorthing),\n    easting: Math.trunc(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return {string} the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return {string} two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","const mgrs = require('mgrs');\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 7,\n    center: {lat: 30.121, lng: -85.706}\n  });\n\n  console.log(\"16RGU\", mgrs.inverse('16RGU'))\n});"]}